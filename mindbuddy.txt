 Python (Backend - Flask Example)


# python/app.py
from flask import Flask, render_template, request, jsonify
import nlp_utils  # You'll create this file
# from ml_model import predict  # If you use a ML model (optional)

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/get_response", methods=["POST"])
def get_response():
    user_message = request.form["user_message"]
    
    # 1. Process user input (NLP)
    nlp_result = nlp_utils.process_input(user_message)  
    
    # 2. Generate a response
    if nlp_result["intent"] == "sadness":
        response = nlp_utils.get_empathetic_response(nlp_result["entities"])
    elif nlp_result["intent"] == "guidance":
        response = nlp_utils.get_advice(nlp_result["entities"])
    else:
        response = "I'm not sure I understand. Can you rephrase?"
    
    # 3. (Optional) Use a Machine Learning Model
    #   ml_prediction = predict(user_message)
    #   if ml_prediction["confidence"] > 0.7:
    #       response = ml_prediction["response"]
    
    return jsonify({"response": response})

if __name__ == "__main__":
    app.run(debug=True)


---------------------------------------------------------------
Python (NLP Utilities)

# python/nlp_utils.py
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
# import spacy # For more advanced NLP

#Initialize necessary components
nltk.download('vader_lexicon')
# spacy.cli.download("en_core_web_sm")
# nlp = spacy.load("en_core_web_sm")
sia = SentimentIntensityAnalyzer()

def process_input(text):
    """
    Processes user input to determine intent and entities.
    
    This is a simplified example. You'll need to expand this 
    significantly using more advanced NLP techniques.
    """
    # 1. Sentiment Analysis (Example)
    sentiment_score = sia.polarity_scores(text)
    
    intent = "general"
    if sentiment_score["neg"] > 0.5:
        intent = "sadness"
    elif "help" in text or "advice" in text:
        intent = "guidance"
    
    # 2. Basic Keyword Extraction (Example)
    entities = []
    words = text.lower().split()
    if "lonely" in words:
        entities.append("loneliness")
    
    return {"intent": intent, "entities": entities}

def get_empathetic_response(entities):
    """
    Generates an empathetic response based on detected entities.
    """
    if "loneliness" in entities:
        return "I'm here for you. It's okay to feel lonely.  Have you considered reaching out to a friend?"
    
    return "I understand.  It sounds like you're going through a tough time."

def get_advice(entities):
    """
    Provides guidance or suggests resources.
    """
    return "For guidance, consider talking to a counselor or trusted friend. I can also suggest some helpful online resources."



--------------------------------------------------------------------------------
 HTML (Frontend)

<!DOCTYPE html>
<html>
<head>
    <title>Mind Buddy AI</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="chat-container">
        <div class="chat-log" id="chat-log">
            <div class="chatbot-message">Welcome! How are you feeling today?</div>
        </div>
        <div class="chat-input">
            <input type="text" id="user-input" placeholder="Type your message...">
            <button id="send-button">Send</button>
        </div>
    </div>
    <script src="{{ url_for('static', filename='js/script.js') }}"></script>
</body>
</html>



--------------------------------------------------------------------------------------

 CSS (Frontend)

/* static/css/style.css */
.chat-container {
    width: 400px;
    margin: 0 auto;
    border: 1px solid #ccc;
    height: 500px;
    display: flex;
    flex-direction: column;
}

.chat-log {
    flex-grow: 1;
    overflow-y: scroll;
    padding: 10px;
}

.chat-input {
    padding: 10px;
    border-top: 1px solid #ccc;
    display: flex;
}

#user-input {
    flex-grow: 1;
    margin-right: 10px;
}

.chatbot-message {
    background-color: #f0f0f0;
    padding: 5px;
    border-radius: 5px;
    margin-bottom: 5px;
}

.user-message {
    background-color: #e0f7fa;
    padding: 5px;
    border-radius: 5px;
    margin-bottom: 5px;
    text-align: right;
}


-------------------------------------------------------------------------------

JavaScript (Frontend)


// static/js/script.js
const userInput = document.getElementById("user-input");
const sendButton = document.getElementById("send-button");
const chatLog = document.getElementById("chat-log");

sendButton.addEventListener("click", sendMessage);

userInput.addEventListener("keypress", function(event) {
  if (event.key === "Enter") {
    sendMessage();
  }
});

function sendMessage() {
    const userMessageText = userInput.value;
    if (userMessageText.trim() === "") return;

    // 1. Display user message
    displayMessage(userMessageText, "user");
    userInput.value = "";

    // 2. Send message to the server
    fetch("/get_response", {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
        },
        body: `user_message=${userMessageText}`,
    })
    .then(response => response.json())
    .then(data => {
        // 3. Display chatbot response
        displayMessage(data.response, "chatbot");
    });
}

function displayMessage(message, sender) {
    const messageDiv = document.createElement("div");
    messageDiv.classList.add(sender === "user" ? "user-message" : "chatbot-message");
    messageDiv.textContent = message;
    chatLog.appendChild(messageDiv);
    chatLog.scrollTop = chatLog.scrollHeight; // Scroll to bottom

----------------------------------------------------------------------

AIML (Optional)

<aiml version="1.0">
    <category>
        <pattern>I feel lonely</pattern>
        <template>I'm here for you.  It's important to remember you're not alone.</template>
    </category>
    
    <category>
        <pattern>I am sad</pattern>
        <template>I understand.  Would you like to talk about it?</template>
    </category>
    
    <category>
        <pattern>I need help</pattern>
        <template>I can offer some guidance. What kind of help are you looking for?</template>
    </category>
    
    <category>
        <pattern>*</pattern>
        <template>I'm still learning to understand.  Could you please rephrase?</template>
    </category>
</aiml>



}